/* This file was automatically generated by CasADi.
   The CasADi copyright holders make no ownership claim of its contents. */
/* How to prefix internal symbols */
#ifdef CODEGEN_PREFIX
  #define NAMESPACE_CONCAT(NS, ID) _NAMESPACE_CONCAT(NS, ID)
  #define _NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) single_track_model_impl_ode_fun_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int int
#endif

/* Add prefix to internal symbols */
#define casadi_copy CASADI_PREFIX(copy)
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)
#define casadi_s2 CASADI_PREFIX(s2)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

static const casadi_int casadi_s0[14] = {10, 1, 0, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
static const casadi_int casadi_s1[7] = {3, 1, 0, 3, 0, 1, 2};
static const casadi_int casadi_s2[5] = {1, 1, 0, 1, 0};

void casadi_copy(const casadi_real* x, casadi_int n, casadi_real* y) {
  casadi_int i;
  if (y) {
    if (x) {
      for (i=0; i<n; ++i) *y++ = *x++;
    } else {
      for (i=0; i<n; ++i) *y++ = 0.;
    }
  }
}

/* single_track_model_impl_ode_fun:(i0[10],i1[10],i2[3],i3)->(o0[10]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, void* mem) {
  casadi_int i;
  casadi_real *rr, *ss;
  const casadi_real *cs;
  casadi_real *w0=w+0, *w1=w+10, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, *w16=w+34;
  /* #0: @0 = input[1][0] */
  casadi_copy(arg[1], 10, w0);
  /* #1: @1 = input[0][0] */
  casadi_copy(arg[0], 10, w1);
  /* #2: @2 = @1[2] */
  for (rr=(&w2), ss=w1+2; ss!=w1+3; ss+=1) *rr++ = *ss;
  /* #3: @3 = @1[3] */
  for (rr=(&w3), ss=w1+3; ss!=w1+4; ss+=1) *rr++ = *ss;
  /* #4: @4 = @1[1] */
  for (rr=(&w4), ss=w1+1; ss!=w1+2; ss+=1) *rr++ = *ss;
  /* #5: @4 = (@3+@4) */
  w4  = (w3+w4);
  /* #6: @4 = sin(@4) */
  w4 = sin( w4 );
  /* #7: @4 = (@2*@4) */
  w4  = (w2*w4);
  /* #8: @5 = @1[4] */
  for (rr=(&w5), ss=w1+4; ss!=w1+5; ss+=1) *rr++ = *ss;
  /* #9: @6 = 0.288184 */
  w6 = 2.8818443804034583e-01;
  /* #10: @7 = 3.47 */
  w7 = 3.4700000000000002e+00;
  /* #11: @8 = @1[5] */
  for (rr=(&w8), ss=w1+5; ss!=w1+6; ss+=1) *rr++ = *ss;
  /* #12: @7 = (@7*@8) */
  w7 *= w8;
  /* #13: @9 = @1[6] */
  for (rr=(&w9), ss=w1+6; ss!=w1+7; ss+=1) *rr++ = *ss;
  /* #14: @10 = cos(@9) */
  w10 = cos( w9 );
  /* #15: @11 = @1[7] */
  for (rr=(&w11), ss=w1+7; ss!=w1+8; ss+=1) *rr++ = *ss;
  /* #16: @12 = cos(@11) */
  w12 = cos( w11 );
  /* #17: @10 = (@10+@12) */
  w10 += w12;
  /* #18: @7 = (@7/@10) */
  w7 /= w10;
  /* #19: @10 = (@9-@3) */
  w10  = (w9-w3);
  /* #20: @10 = cos(@10) */
  w10 = cos( w10 );
  /* #21: @10 = (@7*@10) */
  w10  = (w7*w10);
  /* #22: @12 = (@11-@3) */
  w12  = (w11-w3);
  /* #23: @12 = cos(@12) */
  w12 = cos( w12 );
  /* #24: @12 = (@7*@12) */
  w12  = (w7*w12);
  /* #25: @10 = (@10+@12) */
  w10 += w12;
  /* #26: @12 = 5 */
  w12 = 5.;
  /* #27: @13 = (@9-@3) */
  w13  = (w9-w3);
  /* #28: @14 = 0.15875 */
  w14 = 1.5875000000000000e-01;
  /* #29: @14 = (@14*@5) */
  w14 *= w5;
  /* #30: @14 = (@14/@2) */
  w14 /= w2;
  /* #31: @13 = (@13-@14) */
  w13 -= w14;
  /* #32: @12 = (@12*@13) */
  w12 *= w13;
  /* #33: @13 = (@9-@3) */
  w13  = (w9-w3);
  /* #34: @13 = sin(@13) */
  w13 = sin( w13 );
  /* #35: @13 = (@12*@13) */
  w13  = (w12*w13);
  /* #36: @10 = (@10-@13) */
  w10 -= w13;
  /* #37: @13 = 5 */
  w13 = 5.;
  /* #38: @14 = (@11-@3) */
  w14  = (w11-w3);
  /* #39: @15 = 0.17145 */
  w15 = 1.7144999999999999e-01;
  /* #40: @15 = (@15*@5) */
  w15 *= w5;
  /* #41: @15 = (@15/@2) */
  w15 /= w2;
  /* #42: @14 = (@14+@15) */
  w14 += w15;
  /* #43: @13 = (@13*@14) */
  w13 *= w14;
  /* #44: @14 = (@11-@3) */
  w14  = (w11-w3);
  /* #45: @14 = sin(@14) */
  w14 = sin( w14 );
  /* #46: @14 = (@13*@14) */
  w14  = (w13*w14);
  /* #47: @10 = (@10-@14) */
  w10 -= w14;
  /* #48: @6 = (@6*@10) */
  w6 *= w10;
  /* #49: @10 = (@9-@3) */
  w10  = (w9-w3);
  /* #50: @10 = sin(@10) */
  w10 = sin( w10 );
  /* #51: @10 = (@7*@10) */
  w10  = (w7*w10);
  /* #52: @14 = (@11-@3) */
  w14  = (w11-w3);
  /* #53: @14 = sin(@14) */
  w14 = sin( w14 );
  /* #54: @14 = (@7*@14) */
  w14  = (w7*w14);
  /* #55: @10 = (@10+@14) */
  w10 += w14;
  /* #56: @14 = (@9-@3) */
  w14  = (w9-w3);
  /* #57: @14 = cos(@14) */
  w14 = cos( w14 );
  /* #58: @14 = (@12*@14) */
  w14  = (w12*w14);
  /* #59: @10 = (@10+@14) */
  w10 += w14;
  /* #60: @3 = (@11-@3) */
  w3  = (w11-w3);
  /* #61: @3 = cos(@3) */
  w3 = cos( w3 );
  /* #62: @3 = (@13*@3) */
  w3  = (w13*w3);
  /* #63: @10 = (@10+@3) */
  w10 += w3;
  /* #64: @3 = 3.47 */
  w3 = 3.4700000000000002e+00;
  /* #65: @3 = (@3*@2) */
  w3 *= w2;
  /* #66: @10 = (@10/@3) */
  w10 /= w3;
  /* #67: @10 = (@10-@5) */
  w10 -= w5;
  /* #68: @3 = 21.2224 */
  w3 = 2.1222410865874362e+01;
  /* #69: @2 = 0.15875 */
  w2 = 1.5875000000000000e-01;
  /* #70: @2 = (@2*@7) */
  w2 *= w7;
  /* #71: @14 = sin(@9) */
  w14 = sin( w9 );
  /* #72: @2 = (@2*@14) */
  w2 *= w14;
  /* #73: @14 = 0.17145 */
  w14 = 1.7144999999999999e-01;
  /* #74: @14 = (@14*@7) */
  w14 *= w7;
  /* #75: @7 = sin(@11) */
  w7 = sin( w11 );
  /* #76: @14 = (@14*@7) */
  w14 *= w7;
  /* #77: @2 = (@2-@14) */
  w2 -= w14;
  /* #78: @14 = 0.15875 */
  w14 = 1.5875000000000000e-01;
  /* #79: @14 = (@14*@12) */
  w14 *= w12;
  /* #80: @9 = cos(@9) */
  w9 = cos( w9 );
  /* #81: @14 = (@14*@9) */
  w14 *= w9;
  /* #82: @2 = (@2+@14) */
  w2 += w14;
  /* #83: @14 = 0.17145 */
  w14 = 1.7144999999999999e-01;
  /* #84: @14 = (@14*@13) */
  w14 *= w13;
  /* #85: @11 = cos(@11) */
  w11 = cos( w11 );
  /* #86: @14 = (@14*@11) */
  w14 *= w11;
  /* #87: @2 = (@2-@14) */
  w2 -= w14;
  /* #88: @3 = (@3*@2) */
  w3 *= w2;
  /* #89: @2 = 16.6667 */
  w2 = 1.6666666666666668e+01;
  /* #90: @16 = input[2][0] */
  casadi_copy(arg[2], 3, w16);
  /* #91: @14 = @16[0] */
  for (rr=(&w14), ss=w16+0; ss!=w16+1; ss+=1) *rr++ = *ss;
  /* #92: @14 = (@14-@8) */
  w14 -= w8;
  /* #93: @2 = (@2*@14) */
  w2 *= w14;
  /* #94: @14 = @1[8] */
  for (rr=(&w14), ss=w1+8; ss!=w1+9; ss+=1) *rr++ = *ss;
  /* #95: @8 = @1[9] */
  for (rr=(&w8), ss=w1+9; ss!=w1+10; ss+=1) *rr++ = *ss;
  /* #96: @11 = 20 */
  w11 = 20.;
  /* #97: @13 = @16[1] */
  for (rr=(&w13), ss=w16+1; ss!=w16+2; ss+=1) *rr++ = *ss;
  /* #98: @13 = (@13-@14) */
  w13 -= w14;
  /* #99: @11 = (@11*@13) */
  w11 *= w13;
  /* #100: @13 = 20 */
  w13 = 20.;
  /* #101: @9 = @16[2] */
  for (rr=(&w9), ss=w16+2; ss!=w16+3; ss+=1) *rr++ = *ss;
  /* #102: @9 = (@9-@8) */
  w9 -= w8;
  /* #103: @13 = (@13*@9) */
  w13 *= w9;
  /* #104: @1 = vertcat(@4, @5, @6, @10, @3, @2, @14, @8, @11, @13) */
  rr=w1;
  *rr++ = w4;
  *rr++ = w5;
  *rr++ = w6;
  *rr++ = w10;
  *rr++ = w3;
  *rr++ = w2;
  *rr++ = w14;
  *rr++ = w8;
  *rr++ = w11;
  *rr++ = w13;
  /* #105: @0 = (@0-@1) */
  for (i=0, rr=w0, cs=w1; i<10; ++i) (*rr++) -= (*cs++);
  /* #106: output[0][0] = @0 */
  casadi_copy(w0, 10, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int single_track_model_impl_ode_fun(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, void* mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT void single_track_model_impl_ode_fun_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void single_track_model_impl_ode_fun_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int single_track_model_impl_ode_fun_n_in(void) { return 4;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int single_track_model_impl_ode_fun_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT const char* single_track_model_impl_ode_fun_name_in(casadi_int i){
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    case 2: return "i2";
    case 3: return "i3";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* single_track_model_impl_ode_fun_name_out(casadi_int i){
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* single_track_model_impl_ode_fun_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s0;
    case 2: return casadi_s1;
    case 3: return casadi_s2;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* single_track_model_impl_ode_fun_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int single_track_model_impl_ode_fun_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 14;
  if (sz_res) *sz_res = 2;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 37;
  return 0;
}


